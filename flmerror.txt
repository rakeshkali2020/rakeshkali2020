try:
    if week=="0" or day =="1":
                     
        df_product=spark.sql("""select Distinct product_id,unit_of_measure  AS product_UOM from edap_transform.sa_rr_product""")
        df_date=spark.sql("""select date_key,date,technical_week,iso_calendar_week as week,month from edap_transform.rr_dp_out_caldt_def""")
        df_forward=spark.sql("""With cte_forecast as (select * from edap_stg.rr_dp_forward_looking_measures where to_Date(timestamp) = (select max(to_date(timestamp)) from edap_Stg.rr_dp_forward_looking_measures)),
    	cte_join (select  forward_measures_id,
fcst.dp_master_id,
fcst.product_id,
fcst.customer_id,
fcst.global_item_number,
fcst.dc,
fcst.customer_number,
fcst.salesorg,
date,
fcst.timestamp,
demand_plan_quantity,
demand_plan_value,
primary_stat_forecast_quantity,
primary_stat_forecast_value,
seasonality_quantity,
seasonality_value,
customer_level_promotions_quantity,
customer_level_promotions_value,
manual_promotions_quantity,
manual_dp_adjustment_quantity,
manual_dp_adjustment_value,
proposed_demand_plan_quantity,
proposed_demand_plan_value,
sop_approved_forecast_quantity,
sop_approved_forecast_value,
sales_planning_tool_promotions_quantity,
0 as sales_planning_tool_promotions_value,
business_decision_quantity,
business_decision_value,
constraints_quantity,
constraints_value,
media_quantity,
media_value,
pricing_quantity,
pricing_value,
cannibalization_quantity,
cannibalization_value,
consumption_quantity,
consumption_value,
distribution_quantity,
distribution_value,
placeholders_quantity,
placeholders_value,
approved_promo_override,
fc1_quantity,
fc1_gross_sales,
fc2_quantity,
fc2_gross_sales,
fc3_quantity,
fc3_gross_sales,
pl_quantity,
pl_gross_sales,
total_sales_plan_quantity,
total_sales_plan_value,
total_promo_quantity,
total_promo_value,
promobaseline_quantity,
promobaseline_value,
total_spt_quantity,
total_spt_value,
business_decision_quantity + constraints_quantity + media_quantity + pricing_quantity + cannibalization_quantity + consumption_quantity + distribution_quantity + placeholders_quantity + seasonality_quantity + coalesce(total_spt_quantity,0) + coalesce(total_promo_quantity,0) + primary_stat_forecast_quantity + coalesce(extrenaldemand_quantity,0) + coalesce(distributorprimary_quantity,0) + coalesce(FD_Regressor_Quantity,0) as tof_quantity ,
business_decision_value + constraints_value + media_value + pricing_value + cannibalization_value + consumption_value + distribution_value + placeholders_value + seasonality_value + coalesce(total_spt_value,0) + coalesce(total_promo_value,0) + primary_stat_forecast_value + coalesce(externaldemand_value,0) + coalesce(distributorprimary_value,0) + coalesce(FD_Regressor_Revenue,0) as tof_value,
extrenaldemand_quantity,
externaldemand_value,
distributorprimary_quantity,
distributorprimary_value,
CONSENSUS_DEMAND_PLAN_QUANTITY,
CONSTRAINED_DEMAND_PLAN_QUANTITY,
FD_REGRESSOR_QUANTITY,
FD_REGRESSOR_REVENUE,
FD_LONGTERMAUTOADJ_QUANTITY,
fcst.source_nm,
fcst.update_run_ts,
fcst.create_user_id,
fcst.update_user_id,
fcst.dqaction,
fcst.dqmessage ,
case when fcst.salesorg in ('US02','US42','CA07','CA02') then 'NAC' 
when fcst.salesorg in ('MX04','AR06','AR02','BR11','BR09','CR02','CL02','CO05','CO02','EC02','MX13','PE02') then 'LATAM' 
when fcst.salesorg in ('AU02','AU08','ID02','ID03','IE02','MY03','NZ02','NZ04','PH03','SG03','00069','00853','02681','03391','03861','04051') then 'ASEANANZ'
when fcst.salesorg in ('IN02','03431','03451') then 'SA'
else 'EUR' end as region
from cte_forecast fcst )
select * from cte_join """)
        df=df_forward.join(df_product, how='left', on='product_id')
        df=df.join(df_date, how='left', on='date')
        #df=df.withColumn("tof_quantity",when((df.tof_quantity>0),df.tof_quantity).otherwise(0))
        df=df.select(
'forward_measures_id',
'dp_master_id',
'product_id',
'customer_id',
'global_item_number',
'dc',
'customer_number',
'salesorg',
'date',
'technical_week',
'week',
'month',
'timestamp',
'product_uom',
'region',
'demand_plan_quantity',
'demand_plan_value',
'primary_stat_forecast_quantity',
'primary_stat_forecast_value',
'seasonality_quantity',
'seasonality_value',
'customer_level_promotions_quantity',
'customer_level_promotions_value',
'manual_promotions_quantity',
'manual_dp_adjustment_quantity',
'manual_dp_adjustment_value',
'proposed_demand_plan_quantity',
'proposed_demand_plan_value',
'sop_approved_forecast_quantity',
'sop_approved_forecast_value',
'sales_planning_tool_promotions_quantity',
'sales_planning_tool_promotions_value',
'business_decision_quantity',
'business_decision_value',
'constraints_quantity',
'constraints_value',
'media_quantity',
'media_value',
'pricing_quantity',
'pricing_value',
'cannibalization_quantity',
'cannibalization_value',
'consumption_quantity',
'consumption_value',
'distribution_quantity',
'distribution_value',
'placeholders_quantity',
'placeholders_value',
'approved_promo_override',
'fc1_quantity',
'fc1_gross_sales',
'fc2_quantity',
'fc2_gross_sales',
'fc3_quantity',
'fc3_gross_sales',
'pl_quantity',
'pl_gross_sales',
'total_sales_plan_quantity',
'total_sales_plan_value',
'total_promo_quantity',
'total_promo_value',
'promobaseline_quantity',
'promobaseline_value',
'total_spt_quantity',
'total_spt_value',
'tof_quantity',
'tof_value',
'extrenaldemand_quantity',
'externaldemand_value',
'distributorprimary_quantity',
'distributorprimary_value',
'CONSENSUS_DEMAND_PLAN_QUANTITY',
'CONSTRAINED_DEMAND_PLAN_QUANTITY',
'FD_REGRESSOR_QUANTITY',
'FD_REGRESSOR_REVENUE',
'FD_LONGTERMAUTOADJ_QUANTITY',
'source_nm',
'update_run_ts',
'create_user_id',
'update_user_id',
'dqaction',
'dqmessage'
)
        df.createOrReplaceTempView("data")
        df= spark.sql("""
WITH cte_wave
AS (
	SELECT *
	FROM data
	)
	,cte_dp_master
AS (
	SELECT DISTINCT dp_master_id
		,global_item_number
		,dc
		,salesorg
		,average_selling_price
	FROM edap_transform.rr_dp_master_data
	)
	,cte_curr (
	SELECT *
	,CONCAT (
		substring(DATE, 1, 4)
		,'-'
		,substring(DATE, 5, 2)
		,'-'
		,substring(DATE, 7, 2)
		) date_derived FROM edap_transform.currency
	)
	,cte_max_curr (SELECT max(date_derived) AS DATE FROM cte_curr)
	,cte_currency (
	SELECT DISTINCT currency_value
	,rate
	,DATE FROM cte_curr WHERE date_derived IN (
		SELECT DISTINCT DATE
		FROM cte_max_curr
		)
	)
	,cte_kin_PL (
	SELECT DISTINCT dp_master_id
	,unit_price
	,currency
	,effective_start_month
	,effective_end_month FROM edap_transform.rr_price_list),
CTE_NR_GM_curr_year
    AS (	
SELECT * FROM edap_stg.rr_nr_gm_unit_price
WHERE Year = date_part('year', (SELECT current_timestamp))
),
  cte_NR_GM_ranked
    AS (
        SELECT
            dp_master_id,
            `Date`,
            `Currency`,
            Unit_GS,
            Ver,
            Year,
            effective_start_month as NR_GM_effective_start_month,
            effective_end_month as NR_GM_effective_end_month,
            RANK () OVER (
            PARTITION BY dp_master_id, Year, effective_start_month, effective_end_month
                ORDER BY
                Ver desc
            ) AS nr_gm_rank
        FROM
            CTE_NR_GM_curr_year
    ),
  cte_kin_currency_nr_gm
    AS (
        SELECT a.dp_master_id,
            a.Ver,
            a.Year,
            a.NR_GM_effective_start_month,
            a.NR_GM_effective_end_month,
            a.Unit_GS,
            a.`Currency`,
            c.rate
        FROM
            cte_NR_GM_ranked a
        LEFT JOIN cte_currency c
        ON a.`Currency` = c.currency_value  
        WHERE a.nr_gm_rank = 1
    ),
  cte_kin_final (
	SELECT a.dp_master_id
	,a.effective_start_month
	,a.effective_end_month
	,a.unit_price
	,a.currency
	,c.rate FROM cte_kin_PL a LEFT JOIN cte_currency c ON a.currency = c.currency_value
	)
	,cte_join_both
AS (
	SELECT DISTINCT forward_measures_id
		,a.dp_master_id
		,product_id
		,customer_id
		,a.global_item_number
		,a.dc
		,a.customer_number
		,a.salesorg
		,a.DATE
		,technical_week
		,week
		,month
		,TIMESTAMP
		,product_uom
		,region
		,e.effective_start_month
		,e.effective_end_month
		,e.unit_price
		,e.rate AS rate_kin
		,e.currency AS curr_kin
		,d.average_selling_price
    ,f.NR_GM_effective_start_month
    ,f.NR_GM_effective_end_month
    ,f.Unit_GS
    ,f.`Currency` AS curr_nr_gm
    ,f.rate AS rate_nr_gm
		,demand_plan_quantity
		,demand_plan_value
		,primary_stat_forecast_quantity
		,primary_stat_forecast_value
		,seasonality_quantity
		,seasonality_value
		,customer_level_promotions_quantity
		,customer_level_promotions_value
		,manual_promotions_quantity
		,manual_dp_adjustment_quantity
		,manual_dp_adjustment_value
		,proposed_demand_plan_quantity
		,proposed_demand_plan_value
		,sop_approved_forecast_quantity
		,sop_approved_forecast_value
		,sales_planning_tool_promotions_quantity
		,sales_planning_tool_promotions_value
		,business_decision_quantity
		,business_decision_value
		,constraints_quantity
		,constraints_value
		,media_quantity
		,media_value
		,pricing_quantity
		,pricing_value
		,cannibalization_quantity
		,cannibalization_value
		,consumption_quantity
		,consumption_value
		,distribution_quantity
		,distribution_value
		,placeholders_quantity
		,placeholders_value
		,approved_promo_override
		,fc1_quantity
		,fc1_gross_sales
		,fc2_quantity
		,fc2_gross_sales
		,fc3_quantity
		,fc3_gross_sales
		,pl_quantity
		,pl_gross_sales
		,total_sales_plan_quantity
		,total_sales_plan_value
		,total_promo_quantity
		,total_promo_value
		,promobaseline_quantity
		,promobaseline_value
		,total_spt_quantity
		,total_spt_value
		,tof_quantity
		,tof_value
		,extrenaldemand_quantity
		,externaldemand_value
		,distributorprimary_quantity
		,distributorprimary_value
		,CONSENSUS_DEMAND_PLAN_QUANTITY
		,CONSTRAINED_DEMAND_PLAN_QUANTITY
		,FD_REGRESSOR_QUANTITY
		,FD_REGRESSOR_REVENUE
    ,FD_LONGTERMAUTOADJ_QUANTITY
		,source_nm
		,update_run_ts
		,create_user_id
		,update_user_id
		,dqaction
		,dqmessage
	FROM cte_wave a
	LEFT JOIN cte_kin_currency_nr_gm f ON a.dp_master_id = f.dp_master_id
  LEFT JOIN cte_kin_final e ON a.dp_master_id = e.dp_master_id
	LEFT JOIN cte_dp_master d ON a.dp_master_id = d.dp_master_id
	)
	,cte_value_trans (
	SELECT DISTINCT forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
	,salesorg
	,DATE
	,technical_week
	,week
	,month
	,TIMESTAMP
	,product_uom
	,region
	,demand_plan_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
				THEN (Unit_GS * demand_plan_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * demand_plan_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * demand_plan_quantity)
			ELSE 0
			END AS INTEGER) AS demand_plan_value
	,primary_stat_forecast_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * primary_stat_forecast_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * primary_stat_forecast_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * primary_stat_forecast_quantity)
			ELSE 0
			END AS INTEGER) AS primary_stat_forecast_value
	,seasonality_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * seasonality_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * seasonality_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * seasonality_quantity)
			ELSE 0
			END AS INTEGER) AS seasonality_value
	,customer_level_promotions_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * customer_level_promotions_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * customer_level_promotions_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * customer_level_promotions_quantity)
			ELSE 0
			END AS INTEGER) AS customer_level_promotions_value
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * manual_dp_adjustment_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * manual_dp_adjustment_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * manual_dp_adjustment_quantity)
			ELSE 0
			END AS INTEGER) AS manual_dp_adjustment_value
	,proposed_demand_plan_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * proposed_demand_plan_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * proposed_demand_plan_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * proposed_demand_plan_quantity)
			ELSE 0
			END AS INTEGER) AS proposed_demand_plan_value
	,sop_approved_forecast_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * sop_approved_forecast_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * sop_approved_forecast_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * sop_approved_forecast_quantity)
			ELSE 0
			END AS INTEGER) AS sop_approved_forecast_value
	,sales_planning_tool_promotions_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * sales_planning_tool_promotions_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * sales_planning_tool_promotions_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * sales_planning_tool_promotions_quantity)
			ELSE 0
			END AS INTEGER) AS sales_planning_tool_promotions_value
	,business_decision_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * business_decision_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * business_decision_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * business_decision_quantity)
			ELSE 0
			END AS INTEGER) AS business_decision_value
	,constraints_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * constraints_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * constraints_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * constraints_quantity)
			ELSE 0
			END AS INTEGER) AS constraints_value
	,media_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * media_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * media_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * media_quantity)
			ELSE 0
			END AS INTEGER) AS media_value
	,pricing_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * pricing_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * pricing_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * pricing_quantity)
			ELSE 0
			END AS INTEGER) AS pricing_value
	,cannibalization_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * cannibalization_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * cannibalization_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * cannibalization_quantity)
			ELSE 0
			END AS INTEGER) AS cannibalization_value
	,consumption_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * consumption_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * consumption_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * consumption_quantity)
			ELSE 0
			END AS INTEGER) AS consumption_value
	,distribution_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * distribution_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * distribution_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * distribution_quantity)
			ELSE 0
			END AS INTEGER) AS distribution_value
	,placeholders_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * placeholders_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * placeholders_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * placeholders_quantity)
			ELSE 0
			END AS INTEGER) AS placeholders_value
	,approved_promo_override
	,fc1_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * fc1_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * fc1_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * fc1_quantity)
			ELSE 0
			END AS INTEGER) AS fc1_gross_sales
	,fc2_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * fc2_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * fc2_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * fc2_quantity)
			ELSE 0
			END AS INTEGER) AS fc2_gross_sales
	,fc3_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * fc3_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * fc3_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * fc3_quantity)
			ELSE 0
			END AS INTEGER) AS fc3_gross_sales
	,pl_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * pl_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * pl_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * pl_quantity)
			ELSE 0
			END AS INTEGER) AS pl_gross_sales
	,total_sales_plan_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * total_sales_plan_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * total_sales_plan_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * total_sales_plan_quantity)
			ELSE 0
			END AS INTEGER) AS total_sales_plan_value
	,total_promo_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * total_promo_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * total_promo_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * total_promo_quantity)
			ELSE 0
			END AS INTEGER) AS total_promo_value
	,promobaseline_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * promobaseline_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * promobaseline_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * promobaseline_quantity)
			ELSE 0
			END AS INTEGER) AS promobaseline_value
	,total_spt_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * total_spt_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * total_spt_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * total_spt_quantity)
			ELSE 0
			END AS INTEGER) AS total_spt_value
	,tof_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * tof_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * tof_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * tof_quantity)
			ELSE 0
			END AS INTEGER) AS tof_value
	,extrenaldemand_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * extrenaldemand_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * extrenaldemand_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * extrenaldemand_quantity)
			ELSE 0
			END AS INTEGER) AS extrenaldemand_value
	,distributorprimary_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * distributorprimary_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * distributorprimary_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * distributorprimary_quantity)
			ELSE 0
			END AS INTEGER) AS distributorprimary_value
	,CONSENSUS_DEMAND_PLAN_QUANTITY
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * CONSENSUS_DEMAND_PLAN_QUANTITY * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * CONSENSUS_DEMAND_PLAN_QUANTITY * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * CONSENSUS_DEMAND_PLAN_QUANTITY)
			ELSE 0
			END AS INTEGER) AS CONSENSUS_DEMAND_PLAN_VALUE 
	,CONSTRAINED_DEMAND_PLAN_QUANTITY
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * CONSTRAINED_DEMAND_PLAN_QUANTITY * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * CONSTRAINED_DEMAND_PLAN_QUANTITY * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * CONSTRAINED_DEMAND_PLAN_QUANTITY)
			ELSE 0
			END AS INTEGER) AS CONSTRAINED_DEMAND_PLAN_VALUE  
	,FD_REGRESSOR_QUANTITY
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * FD_REGRESSOR_QUANTITY * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * FD_REGRESSOR_QUANTITY * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * FD_REGRESSOR_QUANTITY)
			ELSE 0
			END AS INTEGER) AS FD_REGRESSOR_REVENUE
  ,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage FROM cte_join_both
	) SELECT DISTINCT forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
	,salesorg
	,DATE
	,technical_week
	,week
	,month
	,TIMESTAMP
	,product_uom
	,region
	,demand_plan_quantity
	,SUM (demand_plan_value) AS demand_plan_value
	,primary_stat_forecast_quantity
	,SUM (primary_stat_forecast_value) AS primary_stat_forecast_value
	,seasonality_quantity
	,SUM (seasonality_value) AS seasonality_value
	,customer_level_promotions_quantity
	,SUM (customer_level_promotions_value) AS customer_level_promotions_value
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,SUM (manual_dp_adjustment_value) AS manual_dp_adjustment_value
	,proposed_demand_plan_quantity
	,SUM (proposed_demand_plan_value) AS proposed_demand_plan_value
	,sop_approved_forecast_quantity
	,SUM (sop_approved_forecast_value) AS sop_approved_forecast_value
	,sales_planning_tool_promotions_quantity
	,SUM (sales_planning_tool_promotions_value) AS sales_planning_tool_promotions_value
	,business_decision_quantity
	,SUM (business_decision_value) AS business_decision_value
	,constraints_quantity
	,SUM (constraints_value) AS constraints_value
	,media_quantity
	,SUM (media_value) AS media_value
	,pricing_quantity
	,SUM (pricing_value) AS pricing_value
	,cannibalization_quantity
	,SUM (cannibalization_value) AS cannibalization_value
	,consumption_quantity
	,SUM (consumption_value) AS consumption_value
	,distribution_quantity
	,SUM (distribution_value) AS distribution_value
	,placeholders_quantity
	,SUM (placeholders_value) AS placeholders_value
	,approved_promo_override
	,fc1_quantity
	,SUM (fc1_gross_sales) AS fc1_gross_sales
	,fc2_quantity
	,SUM (fc2_gross_sales) AS fc2_gross_sales
	,fc3_quantity
	,SUM (fc3_gross_sales) AS fc3_gross_sales
	,pl_quantity
	,SUM (pl_gross_sales) AS pl_gross_sales
	,total_sales_plan_quantity
	,SUM (total_sales_plan_value) AS total_sales_plan_value
	,total_promo_quantity
	,SUM (total_promo_value) AS total_promo_value
	,promobaseline_quantity
	,SUM (promobaseline_value) AS promobaseline_value
	,total_spt_quantity
	,SUM (total_spt_value) AS total_spt_value
	,tof_quantity
	,sum (tof_value) AS tof_value
	,extrenaldemand_quantity
	,SUM (extrenaldemand_value) AS externaldemand_value
	,distributorprimary_quantity
	,SUM (distributorprimary_value) AS distributorprimary_value
	,CONSENSUS_DEMAND_PLAN_QUANTITY
  ,SUM(CONSENSUS_DEMAND_PLAN_VALUE) as CONSENSUS_DEMAND_PLAN_VALUE
	,CONSTRAINED_DEMAND_PLAN_QUANTITY
  ,sum(CONSTRAINED_DEMAND_PLAN_VALUE) as CONSTRAINED_DEMAND_PLAN_VALUE
	,FD_REGRESSOR_QUANTITY
	,SUM (FD_REGRESSOR_REVENUE) AS FD_REGRESSOR_REVENUE
  ,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage FROM cte_value_trans GROUP BY forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
	,salesorg
	,DATE
	,technical_week
	,week
	,month
	,TIMESTAMP
	,product_uom
	,region
	,demand_plan_quantity
	,primary_stat_forecast_quantity
	,seasonality_quantity
	,customer_level_promotions_quantity
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,proposed_demand_plan_quantity
	,sop_approved_forecast_quantity
	,sales_planning_tool_promotions_quantity
	,business_decision_quantity
	,constraints_quantity
	,media_quantity
	,pricing_quantity
	,cannibalization_quantity
	,consumption_quantity
	,distribution_quantity
	,placeholders_quantity
    ,approved_promo_override
	,fc1_quantity
	,fc2_quantity
	,fc3_quantity
	,pl_quantity
	,total_sales_plan_quantity
	,total_promo_quantity
	,promobaseline_quantity
	,total_spt_quantity
	,tof_quantity
	,extrenaldemand_quantity
	,distributorprimary_quantity
	,CONSENSUS_DEMAND_PLAN_QUANTITY
	,CONSTRAINED_DEMAND_PLAN_QUANTITY
	,FD_REGRESSOR_QUANTITY
 	,FD_REGRESSOR_REVENUE
    ,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage  """)
     
        df.createOrReplaceTempView("DATA")
        input_count=0
        output_count=0

        df=spark.sql("""select concat_ws(',',collect_list(conc)) as conc_1 from (SELECT DISTINCT concat("'",cast(to_date(timestamp) as string),salesorg,"'") as conc FROM data)""")
        list_forward = df.first()["conc_1"]
        # print(list_forward)
        
        # [tableQuery] = query[deltaTableName].replace("\n"," ").replace("\t"," ").split('|')
        # print(tableQuery)
        spark.sql("""delete from """+transform+""" where concat(to_date(timestamp),salesorg) in (""" +list_forward+""") """)
        

        [tableInsertQuery] = upsert[deltaTableName].replace("\n"," ").replace("\t"," ").split('|')
        spark.sql(tableInsertQuery)
        print(tableInsertQuery)

    else:
    # ------------- updated records in the current file -------------------------------
        df_update=spark.sql("""
    with cte_5 (select distinct global_item_number,dc,salesorg,customer_number,date,sha2(concat(demand_plan_quantity,primary_stat_forecast_quantity,seasonality_quantity,customer_level_promotions_quantity,manual_promotions_quantity,manual_dp_adjustment_quantity,proposed_demand_plan_quantity,sop_approved_forecast_quantity,sales_planning_tool_promotions_quantity,business_decision_quantity,constraints_quantity,media_quantity,pricing_quantity,cannibalization_quantity,consumption_quantity,distribution_quantity,placeholders_quantity,approved_promo_override,fc1_quantity,fc2_quantity,fc3_quantity,pl_quantity,total_sales_plan_quantity,total_promo_quantity,promobaseline_quantity, total_spt_quantity,extrenaldemand_quantity,distributorprimary_quantity,CONSENSUS_DEMAND_PLAN_QUANTITY,CONSTRAINED_DEMAND_PLAN_QUANTITY,FD_REGRESSOR_QUANTITY, FD_LONGTERMAUTOADJ_QUANTITY),256)as hashkey from """+stg+""" where to_date(timestamp)='"""+min_date+"""' ),
    cte_4 (select distinct global_item_number,dc,salesorg,customer_number,date,sha2(concat(demand_plan_quantity,primary_stat_forecast_quantity,seasonality_quantity,customer_level_promotions_quantity,manual_promotions_quantity,manual_dp_adjustment_quantity,
    proposed_demand_plan_quantity,sop_approved_forecast_quantity,sales_planning_tool_promotions_quantity,business_decision_quantity,constraints_quantity,media_quantity,pricing_quantity,cannibalization_quantity,consumption_quantity,distribution_quantity,placeholders_quantity,approved_promo_override,fc1_quantity,fc2_quantity,fc3_quantity,pl_quantity,total_sales_plan_quantity,total_promo_quantity,promobaseline_quantity, total_spt_quantity,extrenaldemand_quantity,distributorprimary_quantity,CONSENSUS_DEMAND_PLAN_QUANTITY,CONSTRAINED_DEMAND_PLAN_QUANTITY,FD_REGRESSOR_QUANTITY,FD_LONGTERMAUTOADJ_QUANTITY),256)as hashkey from """+transform+""" where to_date(timestamp)='"""+min_date+"""'  and salesorg in (select distinct salesorg from """+stg+""" where to_date(timestamp)='"""+min_date+"""') )
    select  distinct global_item_number,dc,salesorg,customer_number from (select a.global_item_number,a.dc,a.salesorg,a.customer_number,a.date,a.hashkey,b.hashkey, case when a.hashkey = b.hashkey then 'Y' else 'N' end as flag from cte_5 a inner join cte_4 b on a.global_item_number=b.global_item_number and a.dc=b.dc and a.salesorg=b.salesorg and a.customer_number=b.customer_number and a.date=b.date) 
    where flag='N' 
    """)
        
        # --------------------------new records in current file ----------------------------
        df_new = spark.sql("""select distinct global_item_number,dc,salesorg,customer_number from """+stg+""" where to_date(timestamp)='"""+min_date+"""' and concat(global_item_number,dc,salesorg,customer_number) not in (select distinct concat(global_item_number,dc,salesorg,customer_number) from  """+transform+""" where to_date(timestamp)='"""+min_date+"""' and salesorg in (select distinct salesorg from """+stg+""" where to_date(timestamp)='"""+min_date+"""') )""")

        # --------------------------obsolete records from previous file ----------------------------
        df_obs = spark.sql("""select distinct global_item_number,dc,salesorg,customer_number from """+transform+""" where to_date(timestamp)='"""+min_date+"""' and salesorg in (select distinct salesorg from """+stg+""" where to_date(timestamp)='"""+min_date+"""')  and concat(global_item_number,dc,salesorg,customer_number) not in (select distinct concat(global_item_number,dc,salesorg,customer_number) from  """+stg+""" where to_date(timestamp)='"""+min_date+"""' )""")

        # ------------- fetching previous day version details from history table of price_list ---------------------
        df=spark.sql("""describe history edap_transform.rr_price_list limit 10""")
        df.createOrReplaceTempView("pl_his")

        df=spark.sql("""select * from pl_his where operation='CREATE OR REPLACE TABLE AS SELECT' and to_date(timestamp)=to_date('"""+today+"""')""")
        
        if df.count() > 0:
            df_version = spark.sql("""select distinct version,to_date(timestamp) as timestamp from pl_his where operation='CREATE OR REPLACE TABLE AS SELECT' and to_date(timestamp)=to_date('"""+yesterday+"""') """)
            
            ver=df_version.collect()[0]
            timestamp = ver.timestamp
            version = str(ver.version)
            print(timestamp,version)
            df_pl=spark.sql("""select distinct global_item_number,dc,salesorg,customer_number from (
            select distinct global_item_number,dc,salesorg,customer_number,unit_price,effective_date,currency from edap_transform.rr_price_list minus
            select distinct global_item_number,dc,salesorg,customer_number,unit_price,effective_date,currency from edap_transform.rr_price_list version as of  """+version+""")""")
            
            if(df_pl.count()== 0):
                df_pl=spark.sql("""select 'NA' global_item_number,'NA' dc,'NA' salesorg,'NA' customer_number""")
                print("No change in unit price")

        else:
            df_pl=spark.sql("""select 'NA' global_item_number,'NA' dc,'NA' salesorg,'NA' customer_number""")
            print("Latest data not available in unit price table")
        # display(df_pl)

        # -----------------fetching previous date version details from history table of flm------------------------
        df=spark.sql("""describe history edap_transform.rr_dp_master_data limit 10""")
        df.createOrReplaceTempView("master_his")

        df=spark.sql("""select * from master_his where operation='CREATE OR REPLACE TABLE AS SELECT' and to_date(timestamp)=to_date('"""+today+"""')""")

        if df.count() > 0:
            df_version = spark.sql("""select distinct version,to_date(timestamp) as timestamp from master_his where operation='CREATE OR REPLACE TABLE AS SELECT' and to_date(timestamp)=to_date('"""+yesterday+"""') """)
            
            ver=df_version.collect()[0]
            timestamp = ver.timestamp
            version = str(ver.version)
            print(timestamp,version)
            df_asp=spark.sql("""select distinct global_item_number,dc,salesorg,customer_number from (
            select distinct global_item_number,dc,salesorg,customer_number,average_selling_price from edap_transform.rr_dp_master_data minus
            select distinct global_item_number,dc,salesorg,customer_number,average_selling_price from edap_transform.rr_dp_master_data version as of """+version+""")""")

            if(df_asp.count() == 0):
                df_asp=spark.sql("""select 'NA' global_item_number,'NA' dc,'NA' salesorg,'NA' customer_number""")
                print("No change in ASP data")
        
        
        else:
            df_asp=spark.sql("""select 'NA' global_item_number,'NA' dc,'NA' salesorg,'NA' customer_number""")
            print("Latest data not available in dp master table")
            # display(df_asp)

        
        df_cal=df_update.union(df_new).union(df_pl).union(df_asp).distinct()
        df_cal=df_cal.filter(df_cal.global_item_number != "NA")
        df_cal.createOrReplaceTempView("union")
        df_obs.createOrReplaceTempView("obsolete")

        df_product=spark.sql("""select Distinct product_id,unit_of_measure  AS product_UOM from edap_transform.sa_rr_product""")
        df_date=spark.sql("""select date_key,date,technical_week,iso_calendar_week as week,month from edap_transform.rr_dp_out_caldt_def""")
        df_forward=spark.sql("""With cte_forecast as (select * from """+stg+""" where to_Date(timestamp) = (select max(to_date(timestamp)) from """+stg+""") and concat(global_item_number,dc,salesorg,customer_number) in (select distinct concat(global_item_number,dc,salesorg,customer_number) from union)),
    cte_join (select  forward_measures_id,
fcst.dp_master_id,
fcst.product_id,
fcst.customer_id,
fcst.global_item_number,
fcst.dc,
fcst.customer_number,
fcst.salesorg,
date,
fcst.timestamp,
demand_plan_quantity,
demand_plan_value,
primary_stat_forecast_quantity,
primary_stat_forecast_value,
seasonality_quantity,
seasonality_value,
customer_level_promotions_quantity,
customer_level_promotions_value,
manual_promotions_quantity,
manual_dp_adjustment_quantity,
manual_dp_adjustment_value,
proposed_demand_plan_quantity,
proposed_demand_plan_value,
sop_approved_forecast_quantity,
sop_approved_forecast_value,
sales_planning_tool_promotions_quantity,
0 as sales_planning_tool_promotions_value,
business_decision_quantity,
business_decision_value,
constraints_quantity,
constraints_value,
media_quantity,
media_value,
pricing_quantity,
pricing_value,
cannibalization_quantity,
cannibalization_value,
consumption_quantity,
consumption_value,
distribution_quantity,
distribution_value,
placeholders_quantity,
placeholders_value,
approved_promo_override,
fc1_quantity,
fc1_gross_sales,
fc2_quantity,
fc2_gross_sales,
fc3_quantity,
fc3_gross_sales,
pl_quantity,
pl_gross_sales,
total_sales_plan_quantity,
total_sales_plan_value,
total_promo_quantity,
total_promo_value,
promobaseline_quantity,
promobaseline_value,
total_spt_quantity,
total_spt_value,
business_decision_quantity + constraints_quantity + media_quantity + pricing_quantity + cannibalization_quantity + consumption_quantity + distribution_quantity + placeholders_quantity + seasonality_quantity + coalesce(total_spt_quantity,0) + coalesce(total_promo_quantity,0) + primary_stat_forecast_quantity + coalesce(extrenaldemand_quantity,0) + coalesce(distributorprimary_quantity,0) + coalesce(FD_Regressor_Quantity,0) as tof_quantity ,
business_decision_value + constraints_value + media_value + pricing_value + cannibalization_value + consumption_value + distribution_value + placeholders_value + seasonality_value + coalesce(total_spt_value,0) + coalesce(total_promo_value,0) + primary_stat_forecast_value + coalesce(externaldemand_value,0) + coalesce(distributorprimary_value,0) + coalesce(FD_Regressor_Revenue,0) as tof_value,
extrenaldemand_quantity,
externaldemand_value,
distributorprimary_quantity,
distributorprimary_value,
CONSENSUS_DEMAND_PLAN_QUANTITY,
CONSTRAINED_DEMAND_PLAN_QUANTITY,
FD_REGRESSOR_QUANTITY,
FD_REGRESSOR_REVENUE,
FD_LONGTERMAUTOADJ_QUANTITY,
fcst.source_nm,
fcst.update_run_ts,
fcst.create_user_id,
fcst.update_user_id,
fcst.dqaction,
fcst.dqmessage ,
case when fcst.salesorg in ('US02','US42','CA07','CA02') then 'NAC' 
when fcst.salesorg in ('MX04','AR06','AR02','BR11','BR09','CR02','CL02','CO05','CO02','EC02','MX13','PE02') then 'LATAM' 
when fcst.salesorg in ('AU02','AU08','ID02','ID03','IE02','MY03','NZ02','NZ04','PH03','SG03','00069','00853','02681','03391','03861','04051') then 'ASEANANZ'
when fcst.salesorg in ('IN02','03431','03451') then 'SA'
else 'EUR' end as region
from cte_forecast fcst )
select * from cte_join """)
        df=df_forward.join(df_product, how='left', on='product_id')
        df=df.join(df_date, how='left', on='date')
        #df=df.withColumn("tof_quantity",when((df.tof_quantity>0),df.tof_quantity).otherwise(0))
        df=df.select(
'forward_measures_id',
'dp_master_id',
'product_id',
'customer_id',
'global_item_number',
'dc',
'customer_number',
'salesorg',
'date',
'technical_week',
'week',
'month',
'timestamp',
'product_uom',
'region',
'demand_plan_quantity',
'demand_plan_value',
'primary_stat_forecast_quantity',
'primary_stat_forecast_value',
'seasonality_quantity',
'seasonality_value',
'customer_level_promotions_quantity',
'customer_level_promotions_value',
'manual_promotions_quantity',
'manual_dp_adjustment_quantity',
'manual_dp_adjustment_value',
'proposed_demand_plan_quantity',
'proposed_demand_plan_value',
'sop_approved_forecast_quantity',
'sop_approved_forecast_value',
'sales_planning_tool_promotions_quantity',
'sales_planning_tool_promotions_value',
'business_decision_quantity',
'business_decision_value',
'constraints_quantity',
'constraints_value',
'media_quantity',
'media_value',
'pricing_quantity',
'pricing_value',
'cannibalization_quantity',
'cannibalization_value',
'consumption_quantity',
'consumption_value',
'distribution_quantity',
'distribution_value',
'placeholders_quantity',
'placeholders_value',
'approved_promo_override',
'fc1_quantity',
'fc1_gross_sales',
'fc2_quantity',
'fc2_gross_sales',
'fc3_quantity',
'fc3_gross_sales',
'pl_quantity',
'pl_gross_sales',
'total_sales_plan_quantity',
'total_sales_plan_value',
'total_promo_quantity',
'total_promo_value',
'promobaseline_quantity',
'promobaseline_value',
'total_spt_quantity',
'total_spt_value',
'tof_quantity',
'tof_value',
'extrenaldemand_quantity',
'externaldemand_value',
'distributorprimary_quantity',
'distributorprimary_value',
'CONSENSUS_DEMAND_PLAN_QUANTITY',
'CONSTRAINED_DEMAND_PLAN_QUANTITY',
'FD_REGRESSOR_QUANTITY',
'FD_REGRESSOR_REVENUE',
'FD_LONGTERMAUTOADJ_QUANTITY',
'source_nm',
'update_run_ts',
'create_user_id',
'update_user_id',
'dqaction',
'dqmessage'
)
        df.createOrReplaceTempView("data")
        df= spark.sql("""
WITH cte_wave
AS (
	SELECT *
	FROM data
	)
	,cte_dp_master
AS (
	SELECT DISTINCT dp_master_id
		,global_item_number
		,dc
		,salesorg
		,average_selling_price
	FROM edap_transform.rr_dp_master_data
	)
	,cte_curr (
	SELECT *
	,CONCAT (
		substring(DATE, 1, 4)
		,'-'
		,substring(DATE, 5, 2)
		,'-'
		,substring(DATE, 7, 2)
		) date_derived FROM edap_transform.currency
	)
	,cte_max_curr (SELECT max(date_derived) AS DATE FROM cte_curr)
	,cte_currency (
	SELECT DISTINCT currency_value
	,rate
	,DATE FROM cte_curr WHERE date_derived IN (
		SELECT DISTINCT DATE
		FROM cte_max_curr
		)
	)
	,cte_kin_PL (
	SELECT DISTINCT dp_master_id
	,unit_price
	,currency
	,effective_start_month
	,effective_end_month FROM edap_transform.rr_price_list),
CTE_NR_GM_curr_year
    AS (	
SELECT * FROM edap_stg.rr_nr_gm_unit_price
WHERE Year = date_part('year', (SELECT current_timestamp))
),
  cte_NR_GM_ranked
    AS (
        SELECT
            dp_master_id,
            `Date`,
            `Currency`,
            Unit_GS,
            Ver,
            Year,
            effective_start_month as NR_GM_effective_start_month,
            effective_end_month as NR_GM_effective_end_month,
            RANK () OVER (
            PARTITION BY dp_master_id, Year, effective_start_month, effective_end_month
                ORDER BY
                Ver desc
            ) AS nr_gm_rank
        FROM
            CTE_NR_GM_curr_year
    ),
  cte_kin_currency_nr_gm
    AS (
        SELECT a.dp_master_id,
            a.Ver,
            a.Year,
            a.NR_GM_effective_start_month,
            a.NR_GM_effective_end_month,
            a.Unit_GS,
            a.`Currency`,
            c.rate
        FROM
            cte_NR_GM_ranked a
        LEFT JOIN cte_currency c
        ON a.`Currency` = c.currency_value  
        WHERE a.nr_gm_rank = 1
    ),
  cte_kin_final (
	SELECT a.dp_master_id
	,a.effective_start_month
	,a.effective_end_month
	,a.unit_price
	,a.currency
	,c.rate FROM cte_kin_PL a LEFT JOIN cte_currency c ON a.currency = c.currency_value
	)
	,cte_join_both
AS (
	SELECT DISTINCT forward_measures_id
		,a.dp_master_id
		,product_id
		,customer_id
		,a.global_item_number
		,a.dc
		,a.customer_number
		,a.salesorg
		,a.DATE
		,technical_week
		,week
		,month
		,TIMESTAMP
		,product_uom
		,region
		,e.effective_start_month
		,e.effective_end_month
		,e.unit_price
		,e.rate AS rate_kin
		,e.currency AS curr_kin
		,d.average_selling_price
    ,f.NR_GM_effective_start_month
    ,f.NR_GM_effective_end_month
    ,f.Unit_GS
    ,f.`Currency` AS curr_nr_gm
    ,f.rate AS rate_nr_gm
		,demand_plan_quantity
		,demand_plan_value
		,primary_stat_forecast_quantity
		,primary_stat_forecast_value
		,seasonality_quantity
		,seasonality_value
		,customer_level_promotions_quantity
		,customer_level_promotions_value
		,manual_promotions_quantity
		,manual_dp_adjustment_quantity
		,manual_dp_adjustment_value
		,proposed_demand_plan_quantity
		,proposed_demand_plan_value
		,sop_approved_forecast_quantity
		,sop_approved_forecast_value
		,sales_planning_tool_promotions_quantity
		,sales_planning_tool_promotions_value
		,business_decision_quantity
		,business_decision_value
		,constraints_quantity
		,constraints_value
		,media_quantity
		,media_value
		,pricing_quantity
		,pricing_value
		,cannibalization_quantity
		,cannibalization_value
		,consumption_quantity
		,consumption_value
		,distribution_quantity
		,distribution_value
		,placeholders_quantity
		,placeholders_value
		,approved_promo_override
		,fc1_quantity
		,fc1_gross_sales
		,fc2_quantity
		,fc2_gross_sales
		,fc3_quantity
		,fc3_gross_sales
		,pl_quantity
		,pl_gross_sales
		,total_sales_plan_quantity
		,total_sales_plan_value
		,total_promo_quantity
		,total_promo_value
		,promobaseline_quantity
		,promobaseline_value
		,total_spt_quantity
		,total_spt_value
		,tof_quantity
		,tof_value
		,extrenaldemand_quantity
		,externaldemand_value
		,distributorprimary_quantity
		,distributorprimary_value
		,CONSENSUS_DEMAND_PLAN_QUANTITY
		,CONSTRAINED_DEMAND_PLAN_QUANTITY
		,FD_REGRESSOR_QUANTITY
		,FD_REGRESSOR_REVENUE
    ,FD_LONGTERMAUTOADJ_QUANTITY
		,source_nm
		,update_run_ts
		,create_user_id
		,update_user_id
		,dqaction
		,dqmessage
	FROM cte_wave a
	LEFT JOIN cte_kin_currency_nr_gm f ON a.dp_master_id = f.dp_master_id
  LEFT JOIN cte_kin_final e ON a.dp_master_id = e.dp_master_id
	LEFT JOIN cte_dp_master d ON a.dp_master_id = d.dp_master_id
	)
	,cte_value_trans (
	SELECT DISTINCT forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
	,salesorg
	,DATE
	,technical_week
	,week
	,month
	,TIMESTAMP
	,product_uom
	,region
	,demand_plan_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
				THEN (Unit_GS * demand_plan_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * demand_plan_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * demand_plan_quantity)
			ELSE 0
			END AS INTEGER) AS demand_plan_value
	,primary_stat_forecast_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * primary_stat_forecast_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * primary_stat_forecast_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * primary_stat_forecast_quantity)
			ELSE 0
			END AS INTEGER) AS primary_stat_forecast_value
	,seasonality_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * seasonality_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * seasonality_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * seasonality_quantity)
			ELSE 0
			END AS INTEGER) AS seasonality_value
	,customer_level_promotions_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * customer_level_promotions_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * customer_level_promotions_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * customer_level_promotions_quantity)
			ELSE 0
			END AS INTEGER) AS customer_level_promotions_value
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * manual_dp_adjustment_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * manual_dp_adjustment_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * manual_dp_adjustment_quantity)
			ELSE 0
			END AS INTEGER) AS manual_dp_adjustment_value
	,proposed_demand_plan_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * proposed_demand_plan_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * proposed_demand_plan_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * proposed_demand_plan_quantity)
			ELSE 0
			END AS INTEGER) AS proposed_demand_plan_value
	,sop_approved_forecast_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * sop_approved_forecast_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * sop_approved_forecast_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * sop_approved_forecast_quantity)
			ELSE 0
			END AS INTEGER) AS sop_approved_forecast_value
	,sales_planning_tool_promotions_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * sales_planning_tool_promotions_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * sales_planning_tool_promotions_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * sales_planning_tool_promotions_quantity)
			ELSE 0
			END AS INTEGER) AS sales_planning_tool_promotions_value
	,business_decision_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * business_decision_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * business_decision_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * business_decision_quantity)
			ELSE 0
			END AS INTEGER) AS business_decision_value
	,constraints_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * constraints_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * constraints_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * constraints_quantity)
			ELSE 0
			END AS INTEGER) AS constraints_value
	,media_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * media_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * media_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * media_quantity)
			ELSE 0
			END AS INTEGER) AS media_value
	,pricing_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * pricing_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * pricing_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * pricing_quantity)
			ELSE 0
			END AS INTEGER) AS pricing_value
	,cannibalization_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * cannibalization_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * cannibalization_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * cannibalization_quantity)
			ELSE 0
			END AS INTEGER) AS cannibalization_value
	,consumption_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * consumption_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * consumption_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * consumption_quantity)
			ELSE 0
			END AS INTEGER) AS consumption_value
	,distribution_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * distribution_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * distribution_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * distribution_quantity)
			ELSE 0
			END AS INTEGER) AS distribution_value
	,placeholders_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * placeholders_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * placeholders_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * placeholders_quantity)
			ELSE 0
			END AS INTEGER) AS placeholders_value
	,approved_promo_override
	,fc1_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * fc1_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * fc1_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * fc1_quantity)
			ELSE 0
			END AS INTEGER) AS fc1_gross_sales
	,fc2_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * fc2_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * fc2_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * fc2_quantity)
			ELSE 0
			END AS INTEGER) AS fc2_gross_sales
	,fc3_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * fc3_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * fc3_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * fc3_quantity)
			ELSE 0
			END AS INTEGER) AS fc3_gross_sales
	,pl_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * pl_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * pl_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * pl_quantity)
			ELSE 0
			END AS INTEGER) AS pl_gross_sales
	,total_sales_plan_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * total_sales_plan_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * total_sales_plan_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * total_sales_plan_quantity)
			ELSE 0
			END AS INTEGER) AS total_sales_plan_value
	,total_promo_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * total_promo_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * total_promo_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * total_promo_quantity)
			ELSE 0
			END AS INTEGER) AS total_promo_value
	,promobaseline_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * promobaseline_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * promobaseline_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * promobaseline_quantity)
			ELSE 0
			END AS INTEGER) AS promobaseline_value
	,total_spt_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * total_spt_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * total_spt_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * total_spt_quantity)
			ELSE 0
			END AS INTEGER) AS total_spt_value
	,tof_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * tof_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * tof_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * tof_quantity)
			ELSE 0
			END AS INTEGER) AS tof_value
	,extrenaldemand_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * extrenaldemand_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * extrenaldemand_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * extrenaldemand_quantity)
			ELSE 0
			END AS INTEGER) AS extrenaldemand_value
	,distributorprimary_quantity
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * distributorprimary_quantity * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * distributorprimary_quantity * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * distributorprimary_quantity)
			ELSE 0
			END AS INTEGER) AS distributorprimary_value
	,CONSENSUS_DEMAND_PLAN_QUANTITY
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * CONSENSUS_DEMAND_PLAN_QUANTITY * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * CONSENSUS_DEMAND_PLAN_QUANTITY * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * CONSENSUS_DEMAND_PLAN_QUANTITY)
			ELSE 0
			END AS INTEGER) AS CONSENSUS_DEMAND_PLAN_VALUE 
	,CONSTRAINED_DEMAND_PLAN_QUANTITY
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * CONSTRAINED_DEMAND_PLAN_QUANTITY * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * CONSTRAINED_DEMAND_PLAN_QUANTITY * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * CONSTRAINED_DEMAND_PLAN_QUANTITY)
			ELSE 0
			END AS INTEGER) AS CONSTRAINED_DEMAND_PLAN_VALUE  
	,FD_REGRESSOR_QUANTITY
	,cast(CASE 
			WHEN Unit_GS IS NOT NULL
			  AND month BETWEEN NR_GM_effective_start_month
					AND NR_GM_effective_end_month
        THEN (Unit_GS * FD_REGRESSOR_QUANTITY * rate_nr_gm)
			WHEN Unit_GS IS NULL AND unit_price IS NOT NULL
				AND month BETWEEN effective_start_month
					AND effective_end_month
				THEN (unit_price * FD_REGRESSOR_QUANTITY * rate_kin)
			WHEN Unit_GS IS NULL AND unit_price IS NULL AND average_selling_price IS NOT NULL
				THEN (average_selling_price * FD_REGRESSOR_QUANTITY)
			ELSE 0
			END AS INTEGER) AS FD_REGRESSOR_REVENUE
  ,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage FROM cte_join_both
	) SELECT DISTINCT forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
	,salesorg
	,DATE
	,technical_week
	,week
	,month
	,TIMESTAMP
	,product_uom
	,region
	,demand_plan_quantity
	,SUM (demand_plan_value) AS demand_plan_value
	,primary_stat_forecast_quantity
	,SUM (primary_stat_forecast_value) AS primary_stat_forecast_value
	,seasonality_quantity
	,SUM (seasonality_value) AS seasonality_value
	,customer_level_promotions_quantity
	,SUM (customer_level_promotions_value) AS customer_level_promotions_value
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,SUM (manual_dp_adjustment_value) AS manual_dp_adjustment_value
	,proposed_demand_plan_quantity
	,SUM (proposed_demand_plan_value) AS proposed_demand_plan_value
	,sop_approved_forecast_quantity
	,SUM (sop_approved_forecast_value) AS sop_approved_forecast_value
	,sales_planning_tool_promotions_quantity
	,SUM (sales_planning_tool_promotions_value) AS sales_planning_tool_promotions_value
	,business_decision_quantity
	,SUM (business_decision_value) AS business_decision_value
	,constraints_quantity
	,SUM (constraints_value) AS constraints_value
	,media_quantity
	,SUM (media_value) AS media_value
	,pricing_quantity
	,SUM (pricing_value) AS pricing_value
	,cannibalization_quantity
	,SUM (cannibalization_value) AS cannibalization_value
	,consumption_quantity
	,SUM (consumption_value) AS consumption_value
	,distribution_quantity
	,SUM (distribution_value) AS distribution_value
	,placeholders_quantity
	,SUM (placeholders_value) AS placeholders_value
	,approved_promo_override
	,fc1_quantity
	,SUM (fc1_gross_sales) AS fc1_gross_sales
	,fc2_quantity
	,SUM (fc2_gross_sales) AS fc2_gross_sales
	,fc3_quantity
	,SUM (fc3_gross_sales) AS fc3_gross_sales
	,pl_quantity
	,SUM (pl_gross_sales) AS pl_gross_sales
	,total_sales_plan_quantity
	,SUM (total_sales_plan_value) AS total_sales_plan_value
	,total_promo_quantity
	,SUM (total_promo_value) AS total_promo_value
	,promobaseline_quantity
	,SUM (promobaseline_value) AS promobaseline_value
	,total_spt_quantity
	,SUM (total_spt_value) AS total_spt_value
	,tof_quantity
	,sum (tof_value) AS tof_value
	,extrenaldemand_quantity
	,SUM (extrenaldemand_value) AS externaldemand_value
	,distributorprimary_quantity
	,SUM (distributorprimary_value) AS distributorprimary_value
	,CONSENSUS_DEMAND_PLAN_QUANTITY
  ,SUM(CONSENSUS_DEMAND_PLAN_VALUE) as CONSENSUS_DEMAND_PLAN_VALUE
	,CONSTRAINED_DEMAND_PLAN_QUANTITY
  ,sum(CONSTRAINED_DEMAND_PLAN_VALUE) as CONSTRAINED_DEMAND_PLAN_VALUE
	,FD_REGRESSOR_QUANTITY
	,SUM (FD_REGRESSOR_REVENUE) AS FD_REGRESSOR_REVENUE
  ,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage FROM cte_value_trans GROUP BY forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
	,salesorg
	,DATE
	,technical_week
	,week
	,month
	,TIMESTAMP
	,product_uom
	,region
	,demand_plan_quantity
	,primary_stat_forecast_quantity
	,seasonality_quantity
	,customer_level_promotions_quantity
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,proposed_demand_plan_quantity
	,sop_approved_forecast_quantity
	,sales_planning_tool_promotions_quantity
	,business_decision_quantity
	,constraints_quantity
	,media_quantity
	,pricing_quantity
	,cannibalization_quantity
	,consumption_quantity
	,distribution_quantity
	,placeholders_quantity
    ,approved_promo_override
	,fc1_quantity
	,fc2_quantity
	,fc3_quantity
	,pl_quantity
	,total_sales_plan_quantity
	,total_promo_quantity
	,promobaseline_quantity
	,total_spt_quantity
	,tof_quantity
	,extrenaldemand_quantity
	,distributorprimary_quantity
	,CONSENSUS_DEMAND_PLAN_QUANTITY
	,CONSTRAINED_DEMAND_PLAN_QUANTITY
	,FD_REGRESSOR_QUANTITY
	,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage  """)
     
        df.createOrReplaceTempView("DATA")
    # ---------updating/inserting the modified and new data----------------------
        print("Merge starts")
        df=spark.sql(""" Merge into """+transform+""" trgt using
(select * from DATA where concat(global_item_number,dc,salesorg,customer_number) in (select distinct 
concat(global_item_number,dc,salesorg,customer_number) from union) and to_Date(timestamp)='"""+min_date+"""') src
on 
trgt.global_item_number = src.global_item_number
and trgt.dc = src.dc
and trgt.customer_number = src.customer_number
and trgt.salesorg = src.salesorg
and trgt.date = src.date
and to_date(trgt.timestamp)='"""+min_date+"""'
when matched
then update set
trgt.demand_plan_quantity = src.demand_plan_quantity
,trgt.demand_plan_value = src.demand_plan_value
,trgt.primary_stat_forecast_quantity = src.primary_stat_forecast_quantity
,trgt.primary_stat_forecast_value = src.primary_stat_forecast_value
,trgt.seasonality_quantity = src.seasonality_quantity
,trgt.seasonality_value = src.seasonality_value
,trgt.customer_level_promotions_quantity = src.customer_level_promotions_quantity
,trgt.customer_level_promotions_value = src.customer_level_promotions_value
,trgt.manual_promotions_quantity = src.manual_promotions_quantity
,trgt.manual_dp_adjustment_quantity = src.manual_dp_adjustment_quantity
,trgt.manual_dp_adjustment_value = src.manual_dp_adjustment_value
,trgt.proposed_demand_plan_quantity = src.proposed_demand_plan_quantity
,trgt.proposed_demand_plan_value = src.proposed_demand_plan_value
,trgt.sop_approved_forecast_quantity = src.sop_approved_forecast_quantity
,trgt.sop_approved_forecast_value = src.sop_approved_forecast_value
,trgt.sales_planning_tool_promotions_quantity = src.sales_planning_tool_promotions_quantity
,trgt.sales_planning_tool_promotions_value = src.sales_planning_tool_promotions_value
,trgt.business_decision_quantity = src.business_decision_quantity
,trgt.business_decision_value = src.business_decision_value
,trgt.constraints_quantity = src.constraints_quantity
,trgt.constraints_value = src.constraints_value
,trgt.media_quantity = src.media_quantity
,trgt.media_value = src.media_value
,trgt.pricing_quantity = src.pricing_quantity
,trgt.pricing_value = src.pricing_value
,trgt.cannibalization_quantity = src.cannibalization_quantity
,trgt.cannibalization_value = src.cannibalization_value
,trgt.consumption_quantity = src.consumption_quantity
,trgt.consumption_value = src.consumption_value
,trgt.distribution_quantity = src.distribution_quantity
,trgt.distribution_value = src.distribution_value
,trgt.placeholders_quantity = src.placeholders_quantity
,trgt.placeholders_value = src.placeholders_value
,trgt.approved_promo_override = src.approved_promo_override
,trgt.fc1_quantity = src.fc1_quantity
,trgt.fc1_gross_sales = src.fc1_gross_sales
,trgt.fc2_quantity = src.fc2_quantity
,trgt.fc2_gross_sales = src.fc2_gross_sales
,trgt.fc3_quantity = src.fc3_quantity
,trgt.fc3_gross_sales = src.fc3_gross_sales
,trgt.pl_quantity = src.pl_quantity
,trgt.pl_gross_sales = src.pl_gross_sales
,trgt.total_sales_plan_quantity = src.total_sales_plan_quantity
,trgt.total_sales_plan_value = src.total_sales_plan_value
,trgt.total_promo_quantity = src.total_promo_quantity
,trgt.total_promo_value = src.total_promo_value
,trgt.promobaseline_quantity=src.promobaseline_quantity
,trgt.promobaseline_value=src.promobaseline_value
,trgt.total_spt_quantity=src.total_spt_quantity
,trgt.total_spt_value=src.total_spt_value
,trgt.tof_quantity=src.tof_quantity
,trgt.tof_value=src.tof_value
,trgt.extrenaldemand_quantity=src.extrenaldemand_quantity
,trgt.externaldemand_value=src.externaldemand_value
,trgt.distributorprimary_quantity=src.distributorprimary_quantity
,trgt.distributorprimary_value=src.distributorprimary_value
,trgt.CONSENSUS_DEMAND_PLAN_QUANTITY=src.CONSENSUS_DEMAND_PLAN_QUANTITY
,trgt.CONSENSUS_DEMAND_PLAN_VALUE=src.CONSENSUS_DEMAND_PLAN_VALUE
,trgt.CONSTRAINED_DEMAND_PLAN_QUANTITY=src.CONSTRAINED_DEMAND_PLAN_QUANTITY
,trgt.CONSTRAINED_DEMAND_PLAN_VALUE=src.CONSTRAINED_DEMAND_PLAN_VALUE
,trgt.FD_REGRESSOR_QUANTITY=src.FD_REGRESSOR_QUANTITY
,trgt.FD_REGRESSOR_REVENUE=src.FD_REGRESSOR_REVENUE
,trgt.FD_LONGTERMAUTOADJ_QUANTITY=src.FD_LONGTERMAUTOADJ_QUANTITY
,trgt.update_run_ts=src.update_run_ts
when not matched then
insert
(forward_measures_id
	,dp_master_id
	,product_id
	,customer_id
	,global_item_number
	,dc
	,customer_number
    ,salesorg
	,date
 	,technical_week
	,week
	,month
	,timestamp
	,product_uom
	,region
	,demand_plan_quantity
	,demand_plan_value
	,primary_stat_forecast_quantity
	,primary_stat_forecast_value
	,seasonality_quantity
	,seasonality_value
	,customer_level_promotions_quantity
	,customer_level_promotions_value
	,manual_promotions_quantity
	,manual_dp_adjustment_quantity
	,manual_dp_adjustment_value
	,proposed_demand_plan_quantity
	,proposed_demand_plan_value
	,sop_approved_forecast_quantity
	,sop_approved_forecast_value
	,sales_planning_tool_promotions_quantity
	,sales_planning_tool_promotions_value
	,business_decision_quantity
	,business_decision_value
	,constraints_quantity
	,constraints_value
	,media_quantity
	,media_value
	,pricing_quantity
	,pricing_value
	,cannibalization_quantity
	,cannibalization_value
	,consumption_quantity
	,consumption_value
	,distribution_quantity
	,distribution_value
	,placeholders_quantity
	,placeholders_value
	,approved_promo_override
	,fc1_quantity
	,fc1_gross_sales
	,fc2_quantity
	,fc2_gross_sales
	,fc3_quantity
	,fc3_gross_sales
	,pl_quantity
	,pl_gross_sales
    ,total_sales_plan_quantity
    ,total_sales_plan_value
    ,total_promo_quantity
    ,total_promo_value
    ,promobaseline_quantity
    ,promobaseline_value
    ,total_spt_quantity
    ,total_spt_value
    ,tof_quantity
    ,tof_value
    ,extrenaldemand_quantity
    ,externaldemand_value
    ,distributorprimary_quantity
    ,distributorprimary_value
		,CONSENSUS_DEMAND_PLAN_QUANTITY
		,CONSENSUS_DEMAND_PLAN_VALUE
    ,CONSTRAINED_DEMAND_PLAN_QUANTITY
    ,CONSTRAINED_DEMAND_PLAN_VALUE
	  ,FD_REGRESSOR_QUANTITY
	  ,FD_REGRESSOR_REVENUE
    ,FD_LONGTERMAUTOADJ_QUANTITY
	,source_nm
	,update_run_ts
	,create_user_id
	,update_user_id
	,dqaction
	,dqmessage)
 VALUES
 (src.forward_measures_id
 ,src.dp_master_id
	,src.product_id
	,src.customer_id
	,src.global_item_number
	,src.dc
	,src.customer_number
    ,src.salesorg
	,src.date
	,src.technical_week
	,src.week
	,src.month
	,'"""+min_date+"""'
	,src.product_uom
	,src.region
	,src.demand_plan_quantity
	,src.demand_plan_value
	,src.primary_stat_forecast_quantity
	,src.primary_stat_forecast_value
	,src.seasonality_quantity
	,src.seasonality_value
	,src.customer_level_promotions_quantity
	,src.customer_level_promotions_value
	,src.manual_promotions_quantity
	,src.manual_dp_adjustment_quantity
	,src.manual_dp_adjustment_value
	,src.proposed_demand_plan_quantity
	,src.proposed_demand_plan_value
	,src.sop_approved_forecast_quantity
	,src.sop_approved_forecast_value
	,src.sales_planning_tool_promotions_quantity
	,src.sales_planning_tool_promotions_value
	,src.business_decision_quantity
	,src.business_decision_value
	,src.constraints_quantity
	,src.constraints_value
	,src.media_quantity
	,src.media_value
	,src.pricing_quantity
	,src.pricing_value
	,src.cannibalization_quantity
	,src.cannibalization_value
	,src.consumption_quantity
	,src.consumption_value
	,src.distribution_quantity
	,src.distribution_value
	,src.placeholders_quantity
	,src.placeholders_value
	,src.approved_promo_override
	,src.fc1_quantity
	,src.fc1_gross_sales
	,src.fc2_quantity
	,src.fc2_gross_sales
	,src.fc3_quantity
	,src.fc3_gross_sales
	,src.pl_quantity
	,src.pl_gross_sales
    ,src.total_sales_plan_quantity
    ,src.total_sales_plan_value
    ,src.total_promo_quantity
    ,src.total_promo_value
    ,src.promobaseline_quantity
    ,src.promobaseline_value
    ,src.total_spt_quantity
    ,src.total_spt_value
    ,src.tof_quantity
    ,src.tof_value
    ,src.extrenaldemand_quantity
    ,src.externaldemand_value
    ,src.distributorprimary_quantity
    ,src.distributorprimary_value
	,src.CONSENSUS_DEMAND_PLAN_QUANTITY
	,src.CONSENSUS_DEMAND_PLAN_VALUE
    ,src.CONSTRAINED_DEMAND_PLAN_QUANTITY
    ,src.CONSTRAINED_DEMAND_PLAN_VALUE
    ,src.FD_REGRESSOR_QUANTITY
	,src.FD_REGRESSOR_REVENUE
  ,src.FD_LONGTERMAUTOADJ_QUANTITY
	,src.source_nm
	,src.update_run_ts
	,src.create_user_id
	,src.update_user_id
	,src.dqaction
	,src.dqmessage
)
""")
        print("Merge ends")

        insertJobAuditDetail(pid, job_id, task_id, job_name, source_name, source_object, source_layer, target_layer, target_object, input_count, output_count, dropoff)
        job_status='success'
        message='end'


except Exception as msg:
        job_status='failed'
        message=str(msg)
        if (len(message) > 4000):
            message=str(msg)[0:4000]  
        else:
            message
        print(message)
        sys.exit()
finally:
        update_push_down(job_status,message,pid)
        SendEmailAlert(job_name,job_status,message,url,start_date,user,clusterId,notebook_path,jobTriggerType,target_layer)